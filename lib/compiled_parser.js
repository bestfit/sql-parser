/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,13],$V2=[1,10],$V3=[1,14],$V4=[1,16],$V5=[5,25],$V6=[1,22],$V7=[1,21],$V8=[5,25,46,57],$V9=[1,26],$Va=[1,33],$Vb=[5,25,46,57,59,75],$Vc=[1,41],$Vd=[1,43],$Ve=[1,53],$Vf=[1,57],$Vg=[1,58],$Vh=[1,54],$Vi=[1,55],$Vj=[1,52],$Vk=[1,56],$Vl=[1,39],$Vm=[5,25,46],$Vn=[5,25,46,57,59],$Vo=[1,70],$Vp=[5,25,29,37],$Vq=[1,73],$Vr=[2,97],$Vs=[1,76],$Vt=[25,29,38],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[5,25,29,36,38,46,49,52,53,56,57,59,75,77,78,79,80,81,83],$VA=[5,25,29,36,38,46,49,52,53,56,57,58,59,64,75,77,78,79,80,81,83,84],$VB=[5,23,25,46,49,50,52,53,56,57,59,75],$VC=[1,127],$VD=[5,25,29,46,57,58],$VE=[1,135],$VF=[5,25,29,46,57,59,77],$VG=[5,25,46,56,57,59,75],$VH=[1,144],$VI=[1,145],$VJ=[1,146],$VK=[5,25,29,36,38,46,49,52,53,56,57,59,75,77,83],$VL=[5,25,46,49,52,53,56,57,59,75],$VM=[5,25,46,57,69,71],$VN=[25,29];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Query":4,"EOF":5,"SelectQuery":6,"Unions":7,"InsertQuery":8,"WithQuery":9,"SelectWithLimitQuery":10,"BasicSelectQuery":11,"Select":12,"OrderClause":13,"GroupClause":14,"LimitClause":15,"SelectClause":16,"WhereClause":17,"Insert":18,"InsertClause":19,"INSERT":20,"INTO":21,"Table":22,"LEFT_PAREN":23,"Fields":24,"RIGHT_PAREN":25,"VALUE":26,"Values":27,"Value":28,"SEPARATOR":29,"With":30,"WithClause":31,"WITH":32,"Aliases":33,"Alias":34,"Literal":35,"AS":36,"SELECT":37,"FROM":38,"DISTINCT":39,"Joins":40,"List":41,"WINDOW":42,"WINDOW_FUNCTION":43,"Number":44,"Union":45,"UNION":46,"ALL":47,"Join":48,"JOIN":49,"ON":50,"Expression":51,"LEFT":52,"RIGHT":53,"INNER":54,"OUTER":55,"WHERE":56,"LIMIT":57,"OFFSET":58,"ORDER":59,"BY":60,"OrderArgs":61,"OffsetClause":62,"OrderArg":63,"DIRECTION":64,"OffsetRows":65,"FetchClause":66,"ROW":67,"ROWS":68,"FETCH":69,"FIRST":70,"ONLY":71,"NEXT":72,"GroupBasicClause":73,"HavingClause":74,"GROUP":75,"ArgumentList":76,"HAVING":77,"MATH":78,"MATH_MULTI":79,"OPERATOR":80,"BETWEEN":81,"BetweenExpression":82,"CONDITIONAL":83,"SUB_SELECT_OP":84,"SubSelectExpression":85,"SUB_SELECT_UNARY_OP":86,"String":87,"Function":88,"UserFunction":89,"Boolean":90,"Parameter":91,"NUMBER":92,"BOOLEAN":93,"PARAMETER":94,"STRING":95,"DBLSTRING":96,"LITERAL":97,"DOT":98,"FUNCTION":99,"AggregateArgumentList":100,"Field":101,"STAR":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"Insert",20:"INSERT",21:"INTO",23:"LEFT_PAREN",25:"RIGHT_PAREN",26:"VALUE",29:"SEPARATOR",30:"With",32:"WITH",36:"AS",37:"SELECT",38:"FROM",39:"DISTINCT",42:"WINDOW",43:"WINDOW_FUNCTION",46:"UNION",47:"ALL",49:"JOIN",50:"ON",52:"LEFT",53:"RIGHT",54:"INNER",55:"OUTER",56:"WHERE",57:"LIMIT",58:"OFFSET",59:"ORDER",60:"BY",64:"DIRECTION",67:"ROW",68:"ROWS",69:"FETCH",70:"FIRST",71:"ONLY",72:"NEXT",75:"GROUP",77:"HAVING",78:"MATH",79:"MATH_MULTI",80:"OPERATOR",81:"BETWEEN",83:"CONDITIONAL",84:"SUB_SELECT_OP",86:"SUB_SELECT_UNARY_OP",92:"NUMBER",93:"BOOLEAN",94:"PARAMETER",95:"STRING",96:"DBLSTRING",97:"LITERAL",98:"DOT",99:"FUNCTION",102:"STAR"},
productions_: [0,[3,2],[4,1],[4,2],[4,1],[4,1],[6,1],[6,1],[11,1],[11,2],[11,2],[11,3],[10,2],[12,1],[12,2],[8,1],[8,1],[19,10],[27,1],[27,3],[9,1],[9,1],[9,2],[31,2],[33,1],[33,3],[34,5],[16,4],[16,5],[16,5],[16,6],[22,1],[22,2],[22,3],[22,3],[22,3],[22,4],[22,6],[7,1],[7,2],[45,2],[45,3],[40,1],[40,2],[48,4],[48,5],[48,5],[48,6],[48,6],[48,6],[48,6],[17,2],[15,2],[15,4],[15,4],[13,3],[13,4],[61,1],[61,3],[63,1],[63,2],[62,2],[62,3],[65,2],[65,2],[66,4],[66,4],[14,1],[14,2],[73,3],[74,2],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,5],[51,3],[51,2],[51,1],[51,1],[82,3],[85,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[41,1],[44,1],[90,1],[91,1],[87,1],[87,1],[35,1],[35,3],[88,4],[89,3],[89,4],[100,1],[100,2],[76,1],[76,3],[24,1],[24,3],[101,1],[101,1],[101,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = $$[$0-1];
break;
case 2: case 4: case 5: case 6: case 7: case 8: case 13: case 15: case 16: case 20: case 21: case 67: case 80: case 81: case 84: case 85: case 86: case 87: case 88: case 89: case 90:
this.$ = $$[$0];
break;
case 3:
this.$ = (function () {
        $$[$0-1].unions = $$[$0];
        return $$[$0-1];
      }());
break;
case 9:
this.$ = (function () {
        $$[$0-1].order = $$[$0];
        return $$[$0-1];
      }());
break;
case 10:
this.$ = (function () {
        $$[$0-1].group = $$[$0];
        return $$[$0-1];
      }());
break;
case 11:
this.$ = (function () {
        $$[$0-2].group = $$[$0-1];
        $$[$0-2].order = $$[$0];
        return $$[$0-2];
      }());
break;
case 12:
this.$ = (function () {
        $$[$0-1].limit = $$[$0];
        return $$[$0-1];
      }());
break;
case 14:
this.$ = (function () {
        $$[$0-1].where = $$[$0];
        return $$[$0-1];
      }());
break;
case 17:
this.$ = new yy.Insert($$[$0-7], $$[$0-5], $$[$0-1]);
break;
case 18: case 24: case 38: case 42: case 57: case 104: case 106:
this.$ = [$$[$0]];
break;
case 19: case 25: case 58: case 105: case 107:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 22:
this.$ = (function () {
        $$[$0-1].select = $$[$0];
        return $$[$0-1];
      }());
break;
case 23:
this.$ = new yy.With($$[$0]);
break;
case 26:
this.$ = new yy.Alias($$[$0-4], $$[$0-1]);
break;
case 27:
this.$ = new yy.Select($$[$0-2], $$[$0], false);
break;
case 28:
this.$ = new yy.Select($$[$0-2], $$[$0], true);
break;
case 29:
this.$ = new yy.Select($$[$0-3], $$[$0-1], false, $$[$0]);
break;
case 30:
this.$ = new yy.Select($$[$0-3], $$[$0-1], true, $$[$0]);
break;
case 31:
this.$ = new yy.Table($$[$0]);
break;
case 32:
this.$ = new yy.Table($$[$0-1], $$[$0]);
break;
case 33:
this.$ = new yy.Table($$[$0-2], $$[$0]);
break;
case 34: case 63: case 64: case 65: case 66: case 71:
this.$ = $$[$0-1];
break;
case 35: case 83:
this.$ = new yy.SubSelect($$[$0-1]);
break;
case 36:
this.$ = new yy.SubSelect($$[$0-2], $$[$0]);
break;
case 37:
this.$ = new yy.Table($$[$0-5], null, $$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 39:
this.$ = $$[$0-1].concat($$[$01]);
break;
case 40:
this.$ = new yy.Union($$[$0]);
break;
case 41:
this.$ = new yy.Union($$[$0], true);
break;
case 43:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 44:
this.$ = new yy.Join($$[$0-2], $$[$0]);
break;
case 45:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT');
break;
case 46:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT');
break;
case 47:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'INNER');
break;
case 48:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'INNER');
break;
case 49:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'OUTER');
break;
case 50:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'OUTER');
break;
case 51:
this.$ = new yy.Where($$[$0]);
break;
case 52:
this.$ = new yy.Limit($$[$0]);
break;
case 53:
this.$ = new yy.Limit($$[$0], $$[$0-2]);
break;
case 54:
this.$ = new yy.Limit($$[$0-2], $$[$0]);
break;
case 55:
this.$ = new yy.Order($$[$0]);
break;
case 56:
this.$ = new yy.Order($$[$0-1], $$[$0]);
break;
case 59:
this.$ = new yy.OrderArgument($$[$0], 'ASC');
break;
case 60:
this.$ = new yy.OrderArgument($$[$0-1], $$[$0]);
break;
case 61:
this.$ = new yy.Offset($$[$0]);
break;
case 62:
this.$ = new yy.Offset($$[$0-1], $$[$0]);
break;
case 68:
this.$ = (function () {
        $$[$0-1].having = $$[$0];
        return $$[$0-1];
      }());
break;
case 69:
this.$ = new yy.Group($$[$0]);
break;
case 70:
this.$ = new yy.Having($$[$0]);
break;
case 72: case 73: case 74: case 75: case 76: case 78:
this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 77:
this.$ = new yy.Op($$[$0-3], $$[$0-4], $$[$0-1]);
break;
case 79:
this.$ = new yy.UnaryOp($$[$0-1], $$[$0]);
break;
case 82:
this.$ = new yy.BetweenOp([$$[$0-2], $$[$0]]);
break;
case 91:
this.$ = new yy.ListValue($$[$0]);
break;
case 92:
this.$ = new yy.NumberValue($$[$0]);
break;
case 93:
this.$ = new yy.BooleanValue($$[$0]);
break;
case 94:
this.$ = new yy.ParameterValue($$[$0]);
break;
case 95:
this.$ = new yy.StringValue($$[$0], "'");
break;
case 96:
this.$ = new yy.StringValue($$[$0], '"');
break;
case 97:
this.$ = new yy.LiteralValue($$[$0]);
break;
case 98:
this.$ = new yy.LiteralValue($$[$0-2], $$[$0]);
break;
case 99:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1]);
break;
case 100:
this.$ = new yy.FunctionValue($$[$0-2], null, true);
break;
case 101:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1], true);
break;
case 102:
this.$ = new yy.ArgumentListValue($$[$0]);
break;
case 103:
this.$ = new yy.ArgumentListValue($$[$0], true);
break;
case 108:
this.$ = new yy.Star();
break;
case 109:
this.$ = new yy.Field($$[$0]);
break;
case 110:
this.$ = new yy.Field($$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:7,12:12,16:15,18:$V0,19:9,20:$V1,30:$V2,31:11,32:$V3,37:$V4},{1:[3]},{5:[1,17]},o($V5,[2,2],{7:18,15:19,45:20,46:$V6,57:$V7}),o($V5,[2,4]),o($V5,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V5,[2,15]),o($V5,[2,16]),o($V5,[2,20]),o($V5,[2,21],{16:23,37:$V4}),o($V8,[2,8],{13:24,14:25,73:27,59:$V9,75:[1,28]}),{21:[1,29]},{33:30,34:31,35:32,97:$Va},o($Vb,[2,13],{17:34,56:[1,35]}),{23:$Vc,24:36,28:42,35:45,39:[1,37],44:46,51:40,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk,101:38,102:$Vl},{1:[2,1]},o($V5,[2,3],{45:59,46:$V6}),o($V8,[2,12]),o($Vm,[2,38]),{44:60,92:$Ve},{6:61,10:6,11:7,12:12,16:15,37:$V4,47:[1,62]},o($V5,[2,22]),o($V8,[2,9]),o($V8,[2,10],{13:63,59:$V9}),{60:[1,64]},o($Vn,[2,67],{74:65,77:[1,66]}),{60:[1,67]},{22:68,23:$Vo,35:69,97:$Va},o([5,25,37],[2,23],{29:[1,71]}),o($Vp,[2,24]),{36:[1,72],98:$Vq},o([5,23,25,29,36,38,42,46,49,50,52,53,56,57,59,75,97,98],$Vr),o($Vb,[2,14]),{23:$Vc,28:42,35:45,44:46,51:74,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{29:$Vs,38:[1,75]},{23:$Vc,24:77,28:42,35:45,44:46,51:40,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk,101:38,102:$Vl},o($Vt,[2,106]),o($Vt,[2,108]),o($Vt,[2,109],{36:[1,78],78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),{4:85,6:3,8:4,9:5,10:6,11:7,12:12,16:15,18:$V0,19:9,20:$V1,23:$Vc,28:42,30:$V2,31:11,32:$V3,35:45,37:$V4,44:46,51:84,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},o($Vz,[2,81],{84:[1,86]}),{23:[1,88],85:87},o($Vz,[2,80]),o($VA,[2,84],{98:$Vq}),o($VA,[2,85]),o($VA,[2,86]),o($VA,[2,87]),o($VA,[2,88]),o($VA,[2,89]),o($VA,[2,90]),o([5,25,29,36,38,46,49,52,53,56,57,58,59,64,75,77,78,79,80,81,83,84,98],$Vr,{23:[1,89]}),o([5,25,29,36,38,46,49,52,53,56,57,58,59,64,67,68,75,77,78,79,80,81,83,84],[2,92]),o($VA,[2,95]),o($VA,[2,96]),{23:[1,90]},o($VA,[2,93]),o($VA,[2,94]),o($Vm,[2,39]),o($V8,[2,52],{29:[1,91],58:[1,92]}),o($Vm,[2,40],{15:19,57:$V7}),{6:93,10:6,11:7,12:12,16:15,37:$V4},o($V8,[2,11]),{28:96,35:45,44:46,61:94,63:95,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},o($Vn,[2,68]),{23:$Vc,28:42,35:45,44:46,51:97,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{23:$Vc,28:42,35:45,44:46,51:99,76:98,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{23:[1,100]},o($VB,[2,31],{35:101,36:[1,102],42:[1,103],97:$Va,98:$Vq}),{4:105,6:3,8:4,9:5,10:6,11:7,12:12,16:15,18:$V0,19:9,20:$V1,23:$Vc,28:42,30:$V2,31:11,32:$V3,35:45,37:$V4,41:104,44:46,51:99,76:106,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{34:107,35:32,97:$Va},{23:[1,108]},{97:[1,109]},o($Vb,[2,51],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),{22:110,23:$Vo,35:69,97:$Va},{23:$Vc,28:42,35:45,44:46,51:40,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk,101:111,102:$Vl},{29:$Vs,38:[1,112]},{35:113,97:$Va},{23:$Vc,28:42,35:45,44:46,51:114,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{23:$Vc,28:42,35:45,44:46,51:115,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{23:$Vc,28:42,35:45,44:46,51:116,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{23:$Vc,28:42,35:45,44:46,51:118,82:117,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{23:$Vc,28:42,35:45,44:46,51:119,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{25:[1,120],78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy},{25:[1,121]},{23:[1,122],85:123},o($Vz,[2,79]),{4:85,6:3,8:4,9:5,10:6,11:7,12:12,16:15,18:$V0,19:9,20:$V1,30:$V2,31:11,32:$V3,37:$V4},{23:$Vc,25:[1,124],28:42,35:45,39:$VC,44:46,51:99,76:126,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk,100:125},{23:$Vc,28:42,35:45,39:$VC,44:46,51:99,76:126,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk,100:128},{44:129,92:$Ve},{44:130,92:$Ve},o($Vm,[2,41],{15:19,57:$V7}),o($V8,[2,55],{62:131,29:[1,132],58:[1,133]}),o($VD,[2,57]),o($VD,[2,59],{64:[1,134]}),o($Vn,[2,70],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),o([5,25,46,57,59,77],[2,69],{29:$VE}),o($VF,[2,104],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),{23:$Vc,24:136,28:42,35:45,44:46,51:40,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk,101:38,102:$Vl},o($VB,[2,32],{98:$Vq}),{35:137,97:$Va},{43:[1,138]},{25:[1,139]},{25:[1,140]},{25:[2,91],29:$VE},o($Vp,[2,25]),{4:141,6:3,8:4,9:5,10:6,11:7,12:12,16:15,18:$V0,19:9,20:$V1,30:$V2,31:11,32:$V3,37:$V4},o([5,23,25,29,36,38,42,46,49,50,52,53,56,57,58,59,64,75,77,78,79,80,81,83,84,97,98],[2,98]),o($VG,[2,27],{40:142,48:143,49:$VH,52:$VI,53:$VJ}),o($Vt,[2,107]),{22:147,23:$Vo,35:69,97:$Va},o($Vt,[2,110],{98:$Vq}),o([5,25,29,36,38,46,49,52,53,56,57,59,75,77,78,80,83],[2,72],{79:$Vv,81:$Vx}),o([5,25,29,36,38,46,49,52,53,56,57,59,75,77,78,79,80,83],[2,73],{81:$Vx}),o([5,25,29,36,38,46,49,52,53,56,57,59,75,77,80,83],[2,74],{78:$Vu,79:$Vv,81:$Vx}),o($Vz,[2,75]),{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:[1,148]},o($VK,[2,76],{78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($Vz,[2,71]),o($Vz,[2,83]),{4:85,6:3,8:4,9:5,10:6,11:7,12:12,16:15,18:$V0,19:9,20:$V1,23:$Vc,28:42,30:$V2,31:11,32:$V3,35:45,37:$V4,41:149,44:46,51:99,76:106,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},o($Vz,[2,78]),o($VA,[2,100]),{25:[1,150]},{25:[2,102],29:$VE},{23:$Vc,28:42,35:45,44:46,51:99,76:151,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{25:[1,152]},o($V8,[2,53]),o($V8,[2,54]),o($V8,[2,56]),{28:96,35:45,44:46,63:153,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{44:155,65:154,92:$Ve},o($VD,[2,60]),{28:156,35:45,44:46,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{25:[1,157],29:$Vs},o($VB,[2,33],{98:$Vq}),{23:[1,158]},o($VB,[2,34]),o($VB,[2,35],{35:159,97:$Va}),{25:[1,160]},o($VG,[2,29],{48:161,49:$VH,52:$VI,53:$VJ}),o($VL,[2,42]),{22:162,23:$Vo,35:69,97:$Va},{49:[1,163],54:[1,164],55:[1,165]},{49:[1,166],54:[1,167],55:[1,168]},o($VG,[2,28],{48:143,40:169,49:$VH,52:$VI,53:$VJ}),{23:$Vc,28:42,35:45,44:46,51:170,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{25:[1,171]},o($VA,[2,101]),{25:[2,103],29:$VE},o($VA,[2,99]),o($VD,[2,58]),o($V8,[2,61],{66:172,69:[1,173]}),{67:[1,174],68:[1,175]},o($VF,[2,105]),{26:[1,176]},{44:177,92:$Ve},o($VB,[2,36],{98:$Vq}),o($Vp,[2,26]),o($VL,[2,43]),{50:[1,178]},{22:179,23:$Vo,35:69,97:$Va},{49:[1,180]},{49:[1,181]},{22:182,23:$Vo,35:69,97:$Va},{49:[1,183]},{49:[1,184]},o($VG,[2,30],{48:161,49:$VH,52:$VI,53:$VJ}),o($VK,[2,82],{78:$Vu,79:$Vv,80:$Vw,81:$Vx}),o($Vz,[2,77]),o($V8,[2,62]),{70:[1,185],72:[1,186]},o($VM,[2,63]),o($VM,[2,64]),{23:[1,187]},{25:[1,188]},{23:$Vc,28:42,35:45,44:46,51:189,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{50:[1,190]},{22:191,23:$Vo,35:69,97:$Va},{22:192,23:$Vo,35:69,97:$Va},{50:[1,193]},{22:194,23:$Vo,35:69,97:$Va},{22:195,23:$Vo,35:69,97:$Va},{44:155,65:196,92:$Ve},{44:155,65:197,92:$Ve},{27:198,28:199,35:45,44:46,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},o($VB,[2,37]),o($VL,[2,44],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),{23:$Vc,28:42,35:45,44:46,51:200,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{50:[1,201]},{50:[1,202]},{23:$Vc,28:42,35:45,44:46,51:203,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{50:[1,204]},{50:[1,205]},{71:[1,206]},{71:[1,207]},{25:[1,208],29:[1,209]},o($VN,[2,18]),o($VL,[2,45],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),{23:$Vc,28:42,35:45,44:46,51:210,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{23:$Vc,28:42,35:45,44:46,51:211,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},o($VL,[2,46],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),{23:$Vc,28:42,35:45,44:46,51:212,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},{23:$Vc,28:42,35:45,44:46,51:213,85:44,86:$Vd,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},o($V8,[2,65]),o($V8,[2,66]),o($V5,[2,17]),{28:214,35:45,44:46,87:47,88:48,89:49,90:50,91:51,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,99:$Vk},o($VL,[2,47],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),o($VL,[2,49],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),o($VL,[2,48],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),o($VL,[2,50],{78:$Vu,79:$Vv,80:$Vw,81:$Vx,83:$Vy}),o($VN,[2,19])],
defaultActions: {17:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}